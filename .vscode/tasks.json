{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "upload",
            "type": "shell",
            "command": "make",
            // args passed to command (make), i.e. the Makefile target
            "args": ["upload"],
            // use options.cwd property if the Makefile is not in the project root ${workspaceRoot} dir
            "options": {
                "cwd": "${workspaceRoot}/software/c/finka/pico-hello",
                "env": {
                    "CC": "riscv32-unknown-elf-gcc"
                }
            },
            // start the build without prompting for task selection, use "group": "build" otherwise
            "group": {
                "kind": "build",
                "isDefault": true
            },
//            "presentation": {
//                "echo": true,
//                "reveal": "always",
//                "focus": false,
//                "panel": "shared"
//            },

            "presentation": {
                "reveal": "silent",
                //"revealProblems": "onProblem",
                "close": true
            },
            // Use the standard less compilation problem matcher.
            "problemMatcher": {
                "owner": "cpp",
                "fileLocation": ["absolute"],
                "pattern": {
                    "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "severity": 4,
                    "message": 5
                }
            }
        },
        {
            "label": "build",
            "type": "shell",
            "command": "make",
            // args passed to command (make), i.e. the Makefile target
            "args": ["clean", "all"],
            // use options.cwd property if the Makefile is not in the project root ${workspaceRoot} dir
            "options": {
                "cwd": "${workspaceRoot}/software/c/finka/pico-hello",
                "env": {
                    "CC": "riscv32-unknown-elf-gcc"
                }
            },
            // start the build without prompting for task selection, use "group": "build" otherwise
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            // Use the standard less compilation problem matcher.
            "problemMatcher": {
                "owner": "cpp",
                "fileLocation": ["absolute"],
                "pattern": {
                    "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "severity": 4,
                    "message": 5
                }
            }
        },
        {
            "label": "batch_debug",
            "type": "shell",
            "command": "make",
            // args passed to command (make), i.e. the Makefile target
            "args": ["batch_debug"],
            // use options.cwd property if the Makefile is not in the project root ${workspaceRoot} dir
            "options": {
                "cwd": "${workspaceRoot}/software/c/finka/pico-hello",
                "env": {
                    "CC": "riscv32-unknown-elf-gcc"
                }
            },
            // start the build without prompting for task selection, use "group": "build" otherwise
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            // Use the standard less compilation problem matcher.
            "problemMatcher": {
                "owner": "cpp",
                "fileLocation": ["absolute"],
                "pattern": {
                    "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "severity": 4,
                    "message": 5
                }
            }
        }
    ]
}
