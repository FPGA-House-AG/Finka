ThisBuild / version := "1.0"
ThisBuild / scalaVersion := "2.11.12"
ThisBuild / organization := "online.blackwire"

val spinalVersion = "dev"
val spinalDir = "../SpinalHDL"

val spinalCore = "com.github.spinalhdl" %% "spinalhdl-core" % spinalVersion
val spinalLib = "com.github.spinalhdl" %% "spinalhdl-lib" % spinalVersion
val spinalSim = "com.github.spinalhdl" %% "spinalhdl-sim" % spinalVersion
val spinalTester = "com.github.spinalhdl" %% "spinalhdl-tester" % spinalVersion
val spinalIdslPlugin = compilerPlugin("com.github.spinalhdl" %% "spinalhdl-idsl-plugin" % spinalVersion)

lazy val finka = (project in file("."))
  .settings(
    // two lines need to use IDSL plug-in from local ../SpinalHDL/
    scalacOptions += s"-Xplugin:${new File(baseDirectory.value + s"/" + spinalDir + s"/idslplugin/target/scala-2.11/spinalhdl-idsl-plugin_2.11-$spinalVersion.jar")}",
    scalacOptions += s"-Xplugin-require:idsl-plugin",
    libraryDependencies ++= Seq(
      // one line replaced by dependsOn(local*, ...) below
      //libraryDependencies ++= Seq(spinalIdslPlugin, spinalCore, spinalLib, spinalSim, spinalTester)
      "org.scalatest" %% "scalatest" % "3.2.5",
      "org.yaml" % "snakeyaml" % "1.8"
    ),
    name := "Finka",
    Compile / scalaSource := baseDirectory.value / "hardware" / "scala"
    //Test / scalaSource := baseDirectory.value / "test" / "scala"
  )
  .dependsOn(vexRiscv)
  .dependsOn(spinalCorundum)
  .dependsOn(blackwireSpinal)
  .dependsOn(localHdlIdslPlugin, localHdlSim, localHdlCore, localHdlLib, localHdlTester)
  .dependsOn(scalablePipelinedLookup)

lazy val vexRiscv = ProjectRef(file("../VexRiscv"), "root") // c52433575dec04f10063b2fd7cebd0545c8b1be9
lazy val spinalCorundum = ProjectRef(file("../SpinalCorundum"), "spinalCorundum")
lazy val blackwireSpinal = ProjectRef(file("../BlackwireSpinal"), "blackwireSpinal")
lazy val scalablePipelinedLookup = ProjectRef(file("../scalable-pipelined-lookup-fpga"), "scalablePipelinedLookup")

// local checkout of SpinalHDL (dev)
lazy val localHdlIdslPlugin = ProjectRef(file(spinalDir), "idslplugin")
lazy val localHdlCore = ProjectRef(file(spinalDir), "core") 
lazy val localHdlLib = ProjectRef(file(spinalDir), "lib")
lazy val localHdlSim = ProjectRef(file(spinalDir), "sim")
lazy val localHdlTester = ProjectRef(file(spinalDir), "tester")

fork := true
// forward standard input of the sbt process to the forked process
run / connectInput := true

traceLevel in run := 0
traceLevel := 0